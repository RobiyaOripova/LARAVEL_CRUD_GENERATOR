<?php

namespace App\Http\Controllers\Api\v1;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests\{{modelName}}Request\{{modelName}}CreateRequest;
use App\Http\Requests\{{modelName}}Request\{{modelName}}UpdateRequest;
use App\Http\Interfaces\{{modelName}}Interface;
use App\Http\Resources\{{modelName}}Resource;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use App\Models\{{modelName}};


/**
 * @group {{modelName}}
 *
 */
class {{modelName}}Controller extends Controller
{
    public {{modelName}}Interface ${{paramName}}Repository;

    public function __construct({{modelName}}Interface ${{paramName}}Repository)
    {
        $this->{{paramName}}Repository = ${{paramName}}Repository;
    }

    /**
     * @OA\Get(
     *      path="/api/v1/{{routeName}}",
     *      operationId="get{{modelName}}List",
     *      tags={"{{modelName}}"},
     *      summary="Get list of {{routeName}}",
     *      description="Returns list of {{routeName}}",
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *       ),
     *      @OA\Response(
     *          response=401,
     *          description="Unauthenticated",
     *      ),
     *      @OA\Response(
     *          response=403,
     *          description="Forbidden"
     *      )
     *     )
     */

    public function index(Request $request)
    {
        return {{modelName}}Resource::collection($this->{{paramName}}Repository->index($request)->paginate($request->get("per_page")));
    }

    /**
     * @OA\Get(
     *      path="/api/v1/admin/{{routeName}}",
     *      operationId="getAdmin{{modelName}}List",
     *      tags={"{{modelName}}"},
     *      summary="Get list of {{routeName}}",
     *      description="Returns list of {{routeName}}",
     *      security={ {"bearerAuth": {} }},
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *       ),
     *      @OA\Response(
     *          response=401,
     *          description="Unauthenticated",
     *      ),
     *      @OA\Response(
     *          response=403,
     *          description="Forbidden"
     *      )
     *     )
     */

    public function adminIndex(Request $request)
    {
        return {{modelName}}Resource::collection($this->{{paramName}}Repository->adminIndex($request)->paginate($request->get("per_page")));
    }

    /**
     * @OA\Get(
     *      path="/api/v1/{{routeName}}/{id}",
     *      operationId="get{{modelName}}ById",
     *      tags={"{{modelName}}"},
     *      summary="Get {{paramName}} information",
     *      description="Returns {{paramName}} data",
     *      @OA\Parameter(
     *          name="id",
     *          description="{{modelName}} id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *       ),
     *      @OA\Response(
     *          response=400,
     *          description="Bad Request"
     *      ),
     *      @OA\Response(
     *          response=401,
     *          description="Unauthenticated",
     *      ),
     *      @OA\Response(
     *          response=403,
     *          description="Forbidden"
     *      )
     * )
     */


    public function show(Request $request, {{modelName}} ${{paramName}})
    {
        return new  {{modelName}}Resource($this->{{paramName}}Repository->show($request, ${{paramName}})->first());
    }

    /**
     * @OA\Post(
     *      path="/api/v1/admin/{{routeName}}",
     *      operationId="create{{modelName}}",
     *      tags={"{{modelName}}"},
     *      summary="Create new {{paramName}}",
     *      description="Returns {{paramName}} data",
     *      security={ {"bearerAuth": {} }},
     *
     *      @OA\RequestBody(
     *          required=true,
     *          @OA\JsonContent(
     *		  {{fields}}
     *
     * )
     * ),
     *
     *      @OA\Response(
     *          response=201,
     *          description="Successful operation",
     *       ),
     *      @OA\Response(
     *          response=400,
     *          description="Bad Request"
     *      ),
     *      @OA\Response(
     *          response=401,
     *          description="Unauthenticated",
     *      ),
     *      @OA\Response(
     *          response=403,
     *          description="Forbidden"
     *      )
     * )
     */

    public function create({{modelName}}CreateRequest $createRequest)
    {
        return successResponse("created successfully", $this->{{paramName}}Repository->create($createRequest));
    }

    /**
     * @OA\Put(
     *      path="/api/v1/admin/{{routeName}}/{id}",
     *      operationId="update{{modelName}}",
     *      tags={"{{modelName}}"},
     *      summary="Update existing {{paramName}}",
     *      description="Returns updated {{paramName}} data",
     *      security={ {"bearerAuth": {} }},
     *      @OA\Parameter(
     *          name="id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *
     *      @OA\RequestBody(
     *          required=true,
     *          @OA\JsonContent(
     *		  {{fields}}
     *
     * )
     * ),
     *      @OA\Response(
     *          response=202,
     *          description="Successful operation",
     *       ),
     *      @OA\Response(
     *          response=400,
     *          description="Bad Request"
     *      ),
     *      @OA\Response(
     *          response=401,
     *          description="Unauthenticated",
     *      ),
     *      @OA\Response(
     *          response=403,
     *          description="Forbidden"
     *      ),
     *      @OA\Response(
     *          response=404,
     *          description="Resource Not Found"
     *      )
     * )
     */

    public function update({{modelName}}UpdateRequest $updateRequest, {{modelName}} ${{paramName}})
    {
        return successResponse("updated successfully", $this->{{paramName}}Repository->update($updateRequest, ${{paramName}}));
    }

    /**
     * @OA\Delete(
     *      path="/api/v1/admin/{{routeName}}/{id}",
     *      operationId="delete{{modelName}}",
     *      tags={"{{modelName}}"},
     *      summary="Delete existing {{paramName}}",
     *      description="Deletes a record and returns no content",
     *      security={ {"bearerAuth": {} }},
     *      @OA\Parameter(
     *          name="id",
     *          description="{{modelName}} id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *      @OA\Response(
     *          response=204,
     *          description="Successful operation",
     *          @OA\JsonContent()
     *       ),
     *      @OA\Response(
     *          response=401,
     *          description="Unauthenticated",
     *      ),
     *      @OA\Response(
     *          response=403,
     *          description="Forbidden"
     *      ),
     *      @OA\Response(
     *          response=404,
     *          description="Resource Not Found"
     *      )
     * )
     */

    public function destroy({{modelName}} ${{paramName}}): JsonResponse
    {
        return successResponse("deleted successfully", $this->{{paramName}}Repository->delete(${{paramName}}));
    }
}
